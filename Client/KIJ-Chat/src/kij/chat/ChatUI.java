/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kij.chat;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.ScrollPaneConstants;

/**
 *
 * @author varis
 */
public class ChatUI extends javax.swing.JFrame {

    private static ClientSocket UiChatting;
    public static String username;

    /**
     * Creates new form ChatUI
     */
    public ChatUI() {

        initComponents();
        socketConnect();
        BuildLoginWindow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainWindow = new javax.swing.JFrame();
        P_mainwindow = new javax.swing.JPanel();
        B_send = new javax.swing.JButton();
        L_loggedInAs = new javax.swing.JLabel();
        L_header = new javax.swing.JLabel();
        TF_message = new javax.swing.JTextField();
        JP_conversation = new javax.swing.JScrollPane();
        TA_conversation = new javax.swing.JTextArea();
        JP_header = new javax.swing.JScrollPane();
        TA_header = new javax.swing.JTextArea();
        L_uname = new javax.swing.JLabel();
        C_list_online = new javax.swing.JComboBox();
        B_logout = new javax.swing.JButton();
        LoginWindow = new javax.swing.JFrame();
        P_login = new javax.swing.JPanel();
        L_username = new javax.swing.JLabel();
        L_password = new javax.swing.JLabel();
        TF_username = new javax.swing.JTextField();
        TF_password = new javax.swing.JPasswordField();
        B_login = new javax.swing.JButton();
        B_register = new javax.swing.JButton();
        L_notiflogin = new javax.swing.JLabel();

        B_send.setText("Send");
        B_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_sendActionPerformed(evt);
            }
        });

        L_loggedInAs.setText("Logged In As");

        L_header.setText("Header");

        TF_message.setToolTipText("Type a message");

        TA_conversation.setColumns(20);
        TA_conversation.setRows(5);
        JP_conversation.setViewportView(TA_conversation);

        TA_header.setColumns(20);
        TA_header.setRows(5);
        JP_header.setViewportView(TA_header);

        C_list_online.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        B_logout.setText("Logout");
        B_logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_logoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout P_mainwindowLayout = new javax.swing.GroupLayout(P_mainwindow);
        P_mainwindow.setLayout(P_mainwindowLayout);
        P_mainwindowLayout.setHorizontalGroup(
            P_mainwindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_mainwindowLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(P_mainwindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(JP_header, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JP_conversation, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, P_mainwindowLayout.createSequentialGroup()
                        .addGroup(P_mainwindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(L_header)
                            .addGroup(P_mainwindowLayout.createSequentialGroup()
                                .addComponent(TF_message, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(C_list_online, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(B_send, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE))
                    .addGroup(P_mainwindowLayout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(L_uname, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(B_logout, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(P_mainwindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(P_mainwindowLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(L_loggedInAs, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(556, Short.MAX_VALUE)))
        );
        P_mainwindowLayout.setVerticalGroup(
            P_mainwindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, P_mainwindowLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(P_mainwindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(L_uname, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(B_logout, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JP_conversation, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(P_mainwindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TF_message, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(C_list_online)
                    .addComponent(B_send, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(L_header)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(JP_header, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(P_mainwindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(P_mainwindowLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(L_loggedInAs)
                    .addContainerGap(452, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout MainWindowLayout = new javax.swing.GroupLayout(MainWindow.getContentPane());
        MainWindow.getContentPane().setLayout(MainWindowLayout);
        MainWindowLayout.setHorizontalGroup(
            MainWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainWindowLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(P_mainwindow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        MainWindowLayout.setVerticalGroup(
            MainWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainWindowLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(P_mainwindow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        P_login.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Masuk ke sistem", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        P_login.setToolTipText("");

        L_username.setText("Username");

        L_password.setText("Password");

        TF_username.setToolTipText("username");
        TF_username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TF_usernameActionPerformed(evt);
            }
        });

        TF_password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TF_passwordActionPerformed(evt);
            }
        });

        B_login.setText("Masuk");
        B_login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_loginActionPerformed(evt);
            }
        });

        B_register.setText("Daftar");
        B_register.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_registerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout P_loginLayout = new javax.swing.GroupLayout(P_login);
        P_login.setLayout(P_loginLayout);
        P_loginLayout.setHorizontalGroup(
            P_loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_loginLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(P_loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(L_username)
                    .addComponent(L_password))
                .addGap(18, 18, 18)
                .addGroup(P_loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(P_loginLayout.createSequentialGroup()
                        .addComponent(B_login)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(B_register)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(P_loginLayout.createSequentialGroup()
                        .addGroup(P_loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(L_notiflogin, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(TF_password, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                            .addComponent(TF_username, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(24, 24, 24))))
        );
        P_loginLayout.setVerticalGroup(
            P_loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_loginLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(L_notiflogin, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(P_loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L_username)
                    .addComponent(TF_username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(P_loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L_password)
                    .addComponent(TF_password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(P_loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(B_login)
                    .addComponent(B_register))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout LoginWindowLayout = new javax.swing.GroupLayout(LoginWindow.getContentPane());
        LoginWindow.getContentPane().setLayout(LoginWindowLayout);
        LoginWindowLayout.setHorizontalGroup(
            LoginWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginWindowLayout.createSequentialGroup()
                .addContainerGap(134, Short.MAX_VALUE)
                .addComponent(P_login, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );
        LoginWindowLayout.setVerticalGroup(
            LoginWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginWindowLayout.createSequentialGroup()
                .addContainerGap(51, Short.MAX_VALUE)
                .addComponent(P_login, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setEnabled(false);
        setFocusCycleRoot(false);
        setFocusable(false);
        setFocusableWindowState(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 578, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 387, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TF_usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TF_usernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TF_usernameActionPerformed

    private void B_loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_loginActionPerformed
        // TODO add your handling code here:
        if (!TF_username.getText().equals("") && !TF_password.getText().equals("")) {
            try {
                String username = TF_username.getText().trim();
                String password = TF_password.getText().trim();
                String req = "REQ:LOGIN:" + username + ":" + password + ":!>";
                sendReq(req);
            } catch (Exception ex) {
                Logger.getLogger(ChatUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_B_loginActionPerformed

    private void TF_passwordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TF_passwordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TF_passwordActionPerformed

    private void B_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_sendActionPerformed
        // TODO add your handling code here:
        if(!TF_message.getText().equals("") && !C_list_online.getSelectedItem().toString().equals(""))
        {
            String tujuan = C_list_online.getSelectedItem().toString().trim();
            String message = TF_message.getText();
            String req = "REQ:CHAT:" + username + ":"+ tujuan + ":" + message + "SESSION:" + UiChatting.Sess_key + ":!>";
            sendReq(req);
            
            TA_conversation.append(username + ": " + message);
        }
    }//GEN-LAST:event_B_sendActionPerformed

    private void B_registerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_registerActionPerformed
        // TODO add your handling code here:
        if (!TF_username.getText().equals("") && !TF_password.getText().equals("")) {
            try {
                
                String username = TF_username.getText().trim();
                String password = TF_password.getText().trim();
                String req = "REQ:REGISTER:" + username + ":" + password + ":!>";
                sendReq(req);
            } catch (Exception ex) {
                Logger.getLogger(ChatUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_B_registerActionPerformed

    private void B_logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_logoutActionPerformed
        // TODO add your handling code here:
        String req = "REQ:LOGOUT:" + username + ":SESSION:" + UiChatting.Sess_key + ":!>";
        sendReq(req);
        username = "";
        UiChatting.Sess_key = "";
        BuildLoginWindow();
    }//GEN-LAST:event_B_logoutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatUI().setVisible(false);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton B_login;
    private static javax.swing.JButton B_logout;
    private javax.swing.JButton B_register;
    private static javax.swing.JButton B_send;
    public static javax.swing.JComboBox C_list_online;
    private static javax.swing.JScrollPane JP_conversation;
    private static javax.swing.JScrollPane JP_header;
    private static javax.swing.JLabel L_header;
    private static javax.swing.JLabel L_loggedInAs;
    public static javax.swing.JLabel L_notiflogin;
    private javax.swing.JLabel L_password;
    private static javax.swing.JLabel L_uname;
    private javax.swing.JLabel L_username;
    public static javax.swing.JFrame LoginWindow;
    public static javax.swing.JFrame MainWindow;
    private javax.swing.JPanel P_login;
    private static javax.swing.JPanel P_mainwindow;
    public static javax.swing.JTextArea TA_conversation;
    public static javax.swing.JTextArea TA_header;
    private static javax.swing.JTextField TF_message;
    private javax.swing.JPasswordField TF_password;
    private javax.swing.JTextField TF_username;
    // End of variables declaration//GEN-END:variables

    private void BuildLoginWindow() {
        MainWindow.setVisible(false);
        LoginWindow.setTitle("Login Form");
        LoginWindow.setSize(400, 400);
        LoginWindow.setLocation(250, 200);
        LoginWindow.setResizable(false);
        P_login = new JPanel();
        P_login.add(L_username);
        P_login.add(TF_username);
        P_login.add(B_login);
        LoginWindow.getContentPane().add(P_login);
        LoginWindow.setVisible(true);
    }

    public static void BuildMainWindow() {
        LoginWindow.setVisible(false);
        MainWindow.setTitle("Main Window");
        MainWindow.setSize(800, 500);
        MainWindow.setLocation(250, 200);
        MainWindow.setResizable(false);
        P_mainwindow = new JPanel();
        P_mainwindow.add(L_loggedInAs);
        P_mainwindow.add(L_header);
        
        TA_conversation.setColumns(20);
        TA_conversation.setFont(new java.awt.Font("Tahoma", 0, 12));
        TA_conversation.setForeground(new java.awt.Color(0, 0, 255));
        TA_conversation.setLineWrap(true);
        TA_conversation.setRows(5);
        TA_conversation.setEditable(false);
        
        JP_conversation.setHorizontalScrollBarPolicy(
                ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER
        );
        JP_conversation.setVerticalScrollBarPolicy(
                ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS
        );
        JP_conversation.setViewportView(TA_conversation);
        P_mainwindow.add(JP_conversation);
        
        TA_header.setColumns(20);
        TA_header.setFont(new java.awt.Font("Tahoma", 0, 12));
        TA_header.setForeground(new java.awt.Color(0, 0, 255));
        TA_header.setLineWrap(true);
        TA_header.setRows(5);
        TA_header.setEditable(false);
        
        JP_header.setHorizontalScrollBarPolicy(
                ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER
        );
        JP_header.setVerticalScrollBarPolicy(
                ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS
        );
        JP_header.setViewportView(TA_header);
        P_mainwindow.add(JP_header);
        
        L_uname.setText(username);
        P_mainwindow.add(L_uname);
        
        P_mainwindow.add(B_logout);
        
        MainWindow.getContentPane().add(P_mainwindow);
        MainWindow.setVisible(true);
    }

    private void socketConnect(){
        String hostname = "10.151.38.250";
        int port = 9999;
        try {
            UiChatting = new ClientSocket(hostname, port);
            UiChatting.out = new PrintWriter(UiChatting.sock.getOutputStream());
            Thread X = new Thread(UiChatting);
            X.start();
        } catch (IOException ex) {
            Logger.getLogger(ChatUI.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }
    
    private void sendReq(String req)
    {
        try {
            //Start Encrypt
            byte[] key;
            key = UiChatting.key.getBytes("UTF-8");
            RC4 rc4 = new RC4(key);
            byte[] plainbyte = req.getBytes("UTF-8");
            byte[] chiperbyte = rc4.encrypt(plainbyte);
            String chipertext = new String(chiperbyte,"UTF-8");
            req = chipertext;
            //End Encrypt
            
            // Hashing
            SHA1 hash = new SHA1();
            String hashValue;
            try {
                hashValue = hash.calcSHA1(req);
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(ChatUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            // End Hashing
            
            UiChatting.out.println(req);
            UiChatting.out.flush();
            printHeader("REQ : " + req);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(ChatUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void printHeader(String req){
        TA_header.append(req);
    }
    public static void receive(String resp)
    {
        try {
            byte[] key;
            key = UiChatting.key.getBytes("UTF-8");
            RC4 rc4 = new RC4(key);
            byte[] chiperbyte = resp.getBytes("UTF-8");
            byte[] plainbyte = rc4.decrypt(chiperbyte);

            String plaintext = new String(plainbyte,"UTF-8");
            resp = plaintext;

            System.out.print(resp);
            List<String> items;
            items = Arrays.asList(resp.split(":"));
            receiveHandler(items);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(ChatUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    private static void receiveHandler(List<String> items)
    {
        
        System.out.print("Handler-In\n");
        System.out.print("nilai item" + items.get(0));

        switch(items.get(0))
        {
            case "RTR":
                System.out.print("Handler-RTR\n");
                if("SUCCESSLOGIN".equals(items.get(1)))
                {
                    System.out.print("Handler-SUCCESSLOGIN\n");
                    username = items.get(2);
                    BuildMainWindow();
                    UiChatting.out.println("REQ:LIST:SESSION:"+ UiChatting.Sess_key +":!>");
                    UiChatting.out.flush();
                    System.out.print("SentList\n");
                }
                
                else if("SUCCESSLIST".equals(items.get(1)))
                {
                    C_list_online.removeAllItems();
//                    List<String> userActive = new ArrayList<String>();
                    for(int i=0;i<items.size();i++)
                    {
                        if("DATA".equals(items.get(i)))
                        {
                            for(int j=i+1;j<items.size();j++)
                            {
                                if("!>".equals(items.get(j))==false)
                                {
//                                    userActive.add(items.get(j));
                                    C_list_online.addItem(items.get(j));
                                }
                                i++;
                            }
                        }
                    }
//                    String[] simpleArray = new String[userActive.size()];
//                    userActive.toArray(simpleArray);
//                    ChatUI.JL_online.setListData(simpleArray);
                }
                else if("SUCCESSREGISTER".equals(items.get(1)))
                {
                    System.out.print("Handler-SUCCESSREGISTER\n");
                    L_notiflogin.setText("Anda telah terdaftar. Silakan login");
                }
                else if("RCHAT".equals(items.get(1)))
                {
                    String sender = items.get(3);
                    String message = items.get(4);
                    printConversation(sender + " : " + message);
                }
                break;
            case "RCV":
                UiChatting.Sess_key = items.get(2);
                break;
            default:
                break;
        }
    }
    private static void printConversation(String message)
    {
        TA_conversation.append(message);
    }
}
